<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="_d_x11_helper_8h" kind="file">
    <compoundname>DX11Helper.h</compoundname>
    <includedby refid="pch_8h" local="yes">D:/Documents/VS2017/repos/Dx11/Dx11L01/pch.h</includedby>
    <invincdepgraph>
      <node id="66">
        <label>D:/Documents/VS2017/repos/Dx11/Dx11L01/Dx11System.cpp</label>
        <link refid="_dx11_system_8cpp"/>
      </node>
      <node id="67">
        <label>D:/Documents/VS2017/repos/Dx11/Dx11L01/pch.cpp</label>
        <link refid="pch_8cpp"/>
      </node>
      <node id="60">
        <label>D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h</label>
        <link refid="DX11Helper.h"/>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>D:/Documents/VS2017/repos/Dx11/Dx11L01/Dx11Graphics.cpp</label>
        <link refid="_dx11_graphics_8cpp"/>
      </node>
      <node id="62">
        <label>D:/Documents/VS2017/repos/Dx11/Dx11L01/D3D11Engine.cpp</label>
        <link refid="_d3_d11_engine_8cpp"/>
      </node>
      <node id="64">
        <label>D:/Documents/VS2017/repos/Dx11/Dx11L01/Dx11Input.cpp</label>
        <link refid="_dx11_input_8cpp"/>
      </node>
      <node id="65">
        <label>D:/Documents/VS2017/repos/Dx11/Dx11L01/Dx11L01.cpp</label>
        <link refid="_dx11_l01_8cpp"/>
      </node>
      <node id="61">
        <label>D:/Documents/VS2017/repos/Dx11/Dx11L01/pch.h</label>
        <link refid="pch_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_d_x11_helper_8h_1a2724e47b77374690bb1834a08ebbd3c6" prot="public" static="no">
        <name>NAME_D3D11_OBJECT</name>
        <param><defname>x</defname></param>
        <initializer>SetName(x.Get(), L#x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h" line="132" column="9" bodyfile="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_x11_helper_8h_1abe2ca60710c73d7d2cdd19f5caf73786" prot="public" static="no">
        <name>NAME_D3D11_OBJECT_INDEXED</name>
        <param><defname>x</defname></param>
        <param><defname>n</defname></param>
        <initializer>SetNameIndexed(x[n].Get(), L#x, n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h" line="133" column="9" bodyfile="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_d_x11_helper_8h_1a8f6249b08c6345149fdd8fa6bcc5c839" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ThrowIfFailed</definition>
        <argsstring>(HRESULT hr, LPCWSTR szMsg=nullptr)</argsstring>
        <name>ThrowIfFailed</name>
        <param>
          <type>HRESULT</type>
          <declname>hr</declname>
        </param>
        <param>
          <type>LPCWSTR</type>
          <declname>szMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h" line="14" column="1" bodyfile="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h" bodystart="14" bodyend="31"/>
        <referencedby refid="class_d3_d11_engine_1a24073e1148ce795440eb2b37c6791449" compoundref="_d3_d11_engine_8cpp" startline="334" endline="429">D3D11Engine::LoadAssets</referencedby>
        <referencedby refid="class_d3_d11_engine_1a5819655f9a6278eb5445f690583a3564" compoundref="_d3_d11_engine_8cpp" startline="131" endline="332">D3D11Engine::LoadPipeline</referencedby>
      </memberdef>
      <memberdef kind="function" id="_d_x11_helper_8h_1aa69372c36ad00903033ece932a927208" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GetAssetsPath</definition>
        <argsstring>(_Out_writes_(pathSize) WCHAR *path, UINT pathSize)</argsstring>
        <name>GetAssetsPath</name>
        <param>
          <type>_Out_writes_(pathSize) WCHAR *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>UINT</type>
          <declname>pathSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h" line="33" column="1" bodyfile="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h" bodystart="33" bodyend="63"/>
        <referencedby refid="class_d3_d11_engine_1a67b70e736d943b85f0e2a9236696238e" compoundref="_d3_d11_engine_8cpp" startline="5" endline="10">D3D11Engine::D3D11Engine</referencedby>
      </memberdef>
      <memberdef kind="function" id="_d_x11_helper_8h_1a7a0cc83f5d537f89aea28d468b96d397" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT ReadDataFromFile</definition>
        <argsstring>(LPCWSTR filename, byte **data, UINT *size)</argsstring>
        <name>ReadDataFromFile</name>
        <param>
          <type>LPCWSTR</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>byte **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>UINT *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h" line="65" column="1" bodyfile="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h" bodystart="65" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//*********************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(MIT).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>CODE<sp/>IS<sp/>PROVIDED<sp/>*AS<sp/>IS*<sp/>WITHOUT<sp/>WARRANTY<sp/>OF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ANY<sp/>KIND,<sp/>EITHER<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PURPOSE,<sp/>MERCHANTABILITY,<sp/>OR<sp/>NON-INFRINGEMENT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//*********************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="_d_x11_helper_8h_1a8f6249b08c6345149fdd8fa6bcc5c839" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_d_x11_helper_8h_1a8f6249b08c6345149fdd8fa6bcc5c839" kindref="member">ThrowIfFailed</ref>(HRESULT<sp/>hr,<sp/>LPCWSTR<sp/>szMsg<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FAILED(hr))</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pMsg<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(szMsg)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputDebugStringW(szMsg);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numChar,<sp/>len;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>wcslen(szMsg);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno_t<sp/>err<sp/>=<sp/>wcstombs_s(&amp;numChar,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/>szMsg,<sp/>len);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMsg<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[numChar<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>wcstombs_s(&amp;numChar,<sp/>pMsg,<sp/>numChar,<sp/>szMsg,<sp/>len);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::exception(pMsg);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pMsg)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>pMsg;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="_d_x11_helper_8h_1aa69372c36ad00903033ece932a927208" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_d_x11_helper_8h_1aa69372c36ad00903033ece932a927208" kindref="member">GetAssetsPath</ref>(_Out_writes_(pathSize)<sp/>WCHAR*<sp/>path,<sp/>UINT<sp/>pathSize)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::exception();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DWORD<sp/>size<sp/>=<sp/>GetCurrentDirectoryW(pathSize,<sp/>path);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//path[size<sp/>+<sp/>1]<sp/>=<sp/>L&apos;\0&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//path[size]<sp/>=<sp/>L&apos;\\&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>size<sp/>=<sp/>GetModuleFileNameW(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>path,<sp/>pathSize);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0<sp/>||<sp/>size<sp/>==<sp/>pathSize)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Method<sp/>failed<sp/>or<sp/>path<sp/>was<sp/>truncated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::exception();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>WCHAR*<sp/>lastSlash<sp/>=<sp/>wcsrchr(path,<sp/>L</highlight><highlight class="stringliteral">&apos;\\bin\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastSlash)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(lastSlash<sp/>-<sp/>3)<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>lastSlash<sp/>=<sp/>wcsrchr(path,<sp/>L</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastSlash)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(lastSlash<sp/>+<sp/>1)<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="_d_x11_helper_8h_1a7a0cc83f5d537f89aea28d468b96d397" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>HRESULT<sp/><ref refid="_d_x11_helper_8h_1a7a0cc83f5d537f89aea28d468b96d397" kindref="member">ReadDataFromFile</ref>(LPCWSTR<sp/>filename,<sp/>byte**<sp/>data,<sp/>UINT*<sp/>size)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Microsoft::WRL;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>CREATEFILE2_EXTENDED_PARAMETERS<sp/>extendedParams<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedParams.dwSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(CREATEFILE2_EXTENDED_PARAMETERS);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedParams.dwFileAttributes<sp/>=<sp/>FILE_ATTRIBUTE_NORMAL;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedParams.dwFileFlags<sp/>=<sp/>FILE_FLAG_SEQUENTIAL_SCAN;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedParams.dwSecurityQosFlags<sp/>=<sp/>SECURITY_ANONYMOUS;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedParams.lpSecurityAttributes<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedParams.hTemplateFile<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>Wrappers::FileHandle<sp/>file(CreateFile2(filename,<sp/>GENERIC_READ,<sp/>FILE_SHARE_READ,<sp/>OPEN_EXISTING,<sp/>&amp;extendedParams));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file.Get()<sp/>==<sp/>INVALID_HANDLE_VALUE)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::exception();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE_STANDARD_INFO<sp/>fileInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetFileInformationByHandleEx(file.Get(),<sp/>FileStandardInfo,<sp/>&amp;fileInfo,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(fileInfo)))</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::exception();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileInfo.EndOfFile.HighPart<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::exception();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>*data<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">byte*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(fileInfo.EndOfFile.LowPart));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>*size<sp/>=<sp/>fileInfo.EndOfFile.LowPart;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ReadFile(file.Get(),<sp/>*data,<sp/>fileInfo.EndOfFile.LowPart,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::exception();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_OK;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assign<sp/>a<sp/>name<sp/>to<sp/>the<sp/>object<sp/>to<sp/>aid<sp/>with<sp/>debugging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//#if<sp/>defined(_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//inline<sp/>void<sp/>SetName(ID3D11Object*<sp/>pObject,<sp/>LPCWSTR<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>pObject-&gt;SetName(name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//inline<sp/>void<sp/>SetNameIndexed(ID3D11Object*<sp/>pObject,<sp/>LPCWSTR<sp/>name,<sp/>UINT<sp/>index)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>WCHAR<sp/>fullName[50];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(swprintf_s(fullName,<sp/>L&quot;%s[%u]&quot;,<sp/>name,<sp/>index)<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>pObject-&gt;SetName(fullName);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//inline<sp/>void<sp/>SetName(ID3D11Object*,<sp/>LPCWSTR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//inline<sp/>void<sp/>SetNameIndexed(ID3D11Object*,<sp/>LPCWSTR,<sp/>UINT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Naming<sp/>helper<sp/>for<sp/>ComPtr&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigns<sp/>the<sp/>name<sp/>of<sp/>the<sp/>variable<sp/>as<sp/>the<sp/>name<sp/>of<sp/>the<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>indexed<sp/>variant<sp/>will<sp/>include<sp/>the<sp/>index<sp/>in<sp/>the<sp/>name<sp/>of<sp/>the<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="_d_x11_helper_8h_1a2724e47b77374690bb1834a08ebbd3c6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NAME_D3D11_OBJECT(x)<sp/>SetName(x.Get(),<sp/>L#x)</highlight></codeline>
<codeline lineno="133" refid="_d_x11_helper_8h_1abe2ca60710c73d7d2cdd19f5caf73786" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NAME_D3D11_OBJECT_INDEXED(x,<sp/>n)<sp/>SetNameIndexed(x[n].Get(),<sp/>L#x,<sp/>n)</highlight></codeline>
    </programlisting>
    <location file="D:/Documents/VS2017/repos/Dx11/Dx11L01/DX11Helper.h"/>
  </compounddef>
</doxygen>
